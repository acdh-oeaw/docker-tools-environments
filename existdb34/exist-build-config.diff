diff --git a/conf.xml.tmpl bunnecessarympl
index 3677fcc0a..b110e9828 100644
--- a/conf.xml.tmpl
+++ b/conf.xml.tmpl
@@ -905,9 +905,9 @@
             <module uri="http://exist-db.org/xquery/cssparser"          class="org.exist.xquery.modules.cssparser.CSSParserModule"/>
             <module uri="http://exist-db.org/xquery/backups"            class="org.exist.backup.xquery.BackupModule" />
             <module uri="http://exist-db.org/xquery/cache"              class="org.exist.xquery.modules.cache.CacheModule" />
-            <module uri="http://exist-db.org/xquery/context"            class="org.exist.xquery.modules.context.ContextModule" />
+            <module uri="http://exist-db.org/xquery/context"            class="org.exist.xquery.modules.context.ContextModule" / -->
             <module uri="http://exist-db.org/xquery/cqlparser"          class="org.exist.xquery.modules.cqlparser.CQLParserModule" />
-            <module uri="http://exist-db.org/xquery/exi"                class="org.exist.xquery.modules.exi.ExiModule" />
+            <!-- module uri="http://exist-db.org/xquery/exi"                class="org.exist.xquery.modules.exi.ExiModule" />
             <module uri="http://exist-db.org/xquery/jndi"               class="org.exist.xquery.modules.jndi.JNDIModule" />
             <module uri="http://exist-db.org/xquery/jfreechart"         class="org.exist.xquery.modules.jfreechart.JFreeChartModule" />
             <module uri="http://exist-db.org/xquery/memcached"          class="org.exist.xquery.modules.memcached.MemcachedModule" />
diff --git a/extensions/build.properties b/extensions/build.properties
index 5a2073d3d6..a300d5e466 100644
--- a/extensions/build.properties
+++ b/extensions/build.properties
@@ -94,8 +94,8 @@ include.module.context = false
 include.module.counter = true

 # Contextual Query Parser (CQL) module
-include.module.cqlparser = false
-include.module.cqlparser.url = http://maven.indexdata.com/org/z3950/zing/cql-java/1.10/cql-java-1.10.jar
+include.module.cqlparser = true
+include.module.cqlparser.url = http://maven.indexdata.com/org/z3950/zing/cql-java/1.13/cql-java-1.13.jar

 # Date/DateTime/Time utility functions module
 include.module.datetime = true
@@ -153,7 +153,7 @@ include.module.xmpp.url = http://www.igniterealtime.org/downloadServlet?filename

 # XSL FO transformations (Uses Apache FOP)
 include.module.xslfo = true
-include.module.xslfo.url = http://mirror.ox.ac.uk/sites/rsync.apache.org/xmlgraphics/fop/binaries/fop-2.1-bin.zip
+include.module.xslfo.url = https://archive.apache.org/dist/xmlgraphics/fop/binaries/fop-2.1-bin.zip

 # Module to execute external processes (dba users only)
 include.module.process = true
diff --git a/extensions/modules/build.xml b/extensions/modules/build.xml
index c255ebb..ab702f1 100644
--- a/extensions/modules/build.xml
+++ b/extensions/modules/build.xml
@@ -171,7 +171,7 @@
     <!-- 
         Special targets for cqlparser module 
     -->
-    <target name="prepare-cqlparser" if="${include.module.cqlparser}">
+    <target name="prepare-cqlparser" if="true">
         <echo message="------------------------------------------------------"/>
         <echo message="Downloading libraries required by the cqlparser module"/>
         <echo message="------------------------------------------------------"/>
@@ -222,7 +222,7 @@
             <exclude name="org/exist/xquery/modules/compression/**" unless="${include.module.compression}"/>
             <exclude name="org/exist/xquery/modules/context/**" unless="${include.module.context}"/>
             <exclude name="org/exist/xquery/modules/counter/**" unless="${include.module.counter}"/>
-            <exclude name="org/exist/xquery/modules/cqlparser/**" unless="${include.module.cqlparser}"/>
+            <exclude name="org/exist/xquery/modules/cqlparser/**" unless="true"/>
             <exclude name="org/exist/xquery/modules/datetime/**" unless="${include.module.datetime}"/>
             <exclude name="org/exist/xquery/modules/example/**" unless="${include.module.example}"/>
             <exclude name="org/exist/xquery/modules/file/**" unless="${include.module.file}"/>
diff --git a/log4j2.xml b/log4j2.xml
index 227627de40..8751c023a0 100644
--- a/log4j2.xml
+++ b/log4j2.xml
@@ -1,17 +1,17 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <Configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
     <Properties>
-        <Property name="logs">${log4j:configParentLocation}/webapp/WEB-INF/logs</Property>
+        <Property name="logs">${env:EXIST_HOME}/webapp/WEB-INF/logs</Property>
         <Property name="rollover.max.size">10MB</Property>
         <Property name="rollover.max">14</Property>
         <Property name="rollover.file.pattern">%d{yyyyMMddHHmmss}</Property>
-        <Property name="exist.file.pattern">%d [%t] %-5p (%F [%M]:%L) - %m %n</Property>
+        <Property name="exist.file.pattern">%d [%t] %-5p (%F [%M]:%L) - %m{noLookups} %n</Property>
     </Properties>

     <Appenders>

         <Console name="STDOUT">
-            <PatternLayout pattern="%d{DATE} [%t] %-5p (%F [%M]:%L) - %m %n"/>
+            <PatternLayout pattern="%d{DATE} [%t] %-5p (%F [%M]:%L) - %m{noLookups} %n"/>
         </Console>

         <RollingRandomAccessFile name="exist.core" filePattern="${logs}/exist.${rollover.file.pattern}.log.gz" fileName="${logs}/exist.log">
diff --git a/webapp/WEB-INF/web.xml.tmpl b/webapp/WEB-INF/web.xml.tmpl
index 898ead5..06b9951 100644
--- a/webapp/WEB-INF/web.xml.tmpl
+++ b/webapp/WEB-INF/web.xml.tmpl
@@ -97,7 +97,7 @@
 		-->
         <init-param>
             <param-name>hidden</param-name>
-            <param-value>false</param-value>
+            <param-value>true</param-value>
         </init-param>
 
         <load-on-startup>2</load-on-startup>
diff --git a/tools/jetty/standalone-webapps/exist-webapp-context.xml b/tools/jetty/standalone-webapps/exist-webapp-context.xml
index 09381da..4269db8 100644
--- a/tools/jetty/standalone-webapps/exist-webapp-context.xml
+++ b/tools/jetty/standalone-webapps/exist-webapp-context.xml
@@ -6,7 +6,7 @@
     <Set name="contextPath">/</Set>
     <Set name="war"><Property name="jetty.home" default="."/>/etc/standalone</Set>
     <Set name="defaultsDescriptor"><Property name="jetty.home" default="."/>/etc/webdefault.xml</Set>
-    <Set name="tempDirectory"><Property name="jetty.base" default="."/>/tmp</Set>
+    <!-- <Set name="tempDirectory"><Property name="jetty.base" default="."/>/tmp</Set> -->
     <Set name="securityHandler">
         <New class="org.eclipse.jetty.security.ConstraintSecurityHandler">
             <Set name="loginService">
diff --git a/tools/jetty/webapps/exist-webapp-context.xml b/tools/jetty/webapps/exist-webapp-context.xml
index ccff3ee..b66ef0f 100644
--- a/tools/jetty/webapps/exist-webapp-context.xml
+++ b/tools/jetty/webapps/exist-webapp-context.xml
@@ -6,7 +6,7 @@
     <Set name="contextPath">/exist</Set>
     <Set name="war"><Property name="jetty.home" default="."/>/../../webapp/</Set>
     <Set name="defaultsDescriptor"><Property name="jetty.home" default="."/>/etc/webdefault.xml</Set>
-    <Set name="tempDirectory"><Property name="jetty.base" default="."/>/tmp</Set>
+    <!-- <Set name="tempDirectory"><Property name="jetty.base" default="."/>/tmp</Set> -->
     <Set name="securityHandler">
         <New class="org.eclipse.jetty.security.ConstraintSecurityHandler">
             <Set name="loginService">
 .../org/exist/indexing/range/RangeIndexWorker.java | 27 ++++----
 .../indexes/range/test/src/xquery/field-type.xql   | 79 ++++++++++++++++++++++
 .../indexes/range/test/src/xquery/suite-types.xql  |  8 ++-
 3 files changed, 99 insertions(+), 15 deletions(-)

diff --git a/extensions/indexes/range/src/org/exist/indexing/range/RangeIndexWorker.java b/extensions/indexes/range/src/org/exist/indexing/range/RangeIndexWorker.java
index 5775ff57a..d7c06d3ee 100644
--- a/extensions/indexes/range/src/org/exist/indexing/range/RangeIndexWorker.java
+++ b/extensions/indexes/range/src/org/exist/indexing/range/RangeIndexWorker.java
@@ -527,14 +527,16 @@ public class RangeIndexWorker implements OrderedValuesIndex, QNamedKeysIndex {
                 } else {
                     query = toQuery(field, qname, keys[0], operator, docs);
                 }
+                final short nodeType = qname.getNameType() == ElementValue.ATTRIBUTE ? Node.ATTRIBUTE_NODE : Node
+                        .ELEMENT_NODE;
 
                 if (contextSet != null && contextSet.hasOne() && contextSet.getItemType() != Type.DOCUMENT) {
                     NodesFilter filter = new NodesFilter(contextSet);
                     filter.init(searcher.getIndexReader());
                     FilteredQuery filtered = new FilteredQuery(query, filter, FilteredQuery.LEAP_FROG_FILTER_FIRST_STRATEGY);
-                    resultSet.addAll(doQuery(contextId, docs, contextSet, axis, searcher, null, filtered, null));
+                    resultSet.addAll(doQuery(contextId, docs, contextSet, axis, searcher, nodeType, filtered, null));
                 } else {
-                    resultSet.addAll(doQuery(contextId, docs, contextSet, axis, searcher, null, query, null));
+                    resultSet.addAll(doQuery(contextId, docs, contextSet, axis, searcher, nodeType, query, null));
                 }
             }
             return resultSet;
@@ -571,9 +573,9 @@ public class RangeIndexWorker implements OrderedValuesIndex, QNamedKeysIndex {
                 NodesFilter filter = new NodesFilter(contextSet);
                 filter.init(searcher.getIndexReader());
                 FilteredQuery filtered = new FilteredQuery(qu, filter, FilteredQuery.LEAP_FROG_FILTER_FIRST_STRATEGY);
-                resultSet.addAll(doQuery(contextId, docs, contextSet, axis, searcher, null, filtered, null));
+                resultSet.addAll(doQuery(contextId, docs, contextSet, axis, searcher, Node.ELEMENT_NODE, filtered, null));
             } else {
-                resultSet.addAll(doQuery(contextId, docs, contextSet, axis, searcher, null, qu, null));
+                resultSet.addAll(doQuery(contextId, docs, contextSet, axis, searcher, Node.ELEMENT_NODE, qu, null));
             }
             return resultSet;
         });
@@ -594,8 +596,9 @@ public class RangeIndexWorker implements OrderedValuesIndex, QNamedKeysIndex {
 //    }
 
     private NodeSet doQuery(final int contextId, final DocumentSet docs, final NodeSet contextSet, final int axis,
-                            IndexSearcher searcher, final QName qname, Query query, Filter filter) throws IOException {
-        SearchCollector collector = new SearchCollector(docs, contextSet, qname, axis, contextId);
+                            IndexSearcher searcher, final short nodeType, Query query, Filter filter) throws
+            IOException {
+        SearchCollector collector = new SearchCollector(docs, contextSet, nodeType, axis, contextId);
         searcher.search(query, filter, collector);
         return collector.getResultSet();
     }
@@ -603,7 +606,7 @@ public class RangeIndexWorker implements OrderedValuesIndex, QNamedKeysIndex {
     private class SearchCollector extends Collector {
         private final NodeSet resultSet;
         private final NodeSet contextSet;
-        private final QName qname;
+        private final short nodeType;
         private final int axis;
         private final int contextId;
         private final DocumentSet docs;
@@ -613,11 +616,11 @@ public class RangeIndexWorker implements OrderedValuesIndex, QNamedKeysIndex {
         private BinaryDocValues addressValues;
         private final byte[] buf = new byte[1024];
 
-        public SearchCollector(DocumentSet docs, NodeSet contextSet, QName qname, int axis, int contextId) {
+        public SearchCollector(DocumentSet docs, NodeSet contextSet, short nodeType, int axis, int contextId) {
             this.resultSet = new NewArrayNodeSet();
             this.docs = docs;
             this.contextSet = contextSet;
-            this.qname = qname;
+            this.nodeType = nodeType;
             this.axis = axis;
             this.contextId = contextId;
         }
@@ -651,8 +654,7 @@ public class RangeIndexWorker implements OrderedValuesIndex, QNamedKeysIndex {
                 NodeProxy parentNode = contextSet.parentWithChild(storedDocument, nodeId, false, true);
                 if (parentNode != null) {
                     NodeProxy storedNode = new NodeProxy(storedDocument, nodeId);
-                    if (qname != null)
-                        storedNode.setNodeType(qname.getNameType() == ElementValue.ATTRIBUTE ? Node.ATTRIBUTE_NODE : Node.ELEMENT_NODE);
+                    storedNode.setNodeType(nodeType);
                     getAddress(doc, storedNode);
                     if (axis == NodeSet.ANCESTOR) {
                         resultSet.add(parentNode, sizeHint);
@@ -666,8 +668,7 @@ public class RangeIndexWorker implements OrderedValuesIndex, QNamedKeysIndex {
                 }
             } else {
                 NodeProxy storedNode = new NodeProxy(storedDocument, nodeId);
-                if (qname != null)
-                    storedNode.setNodeType(qname.getNameType() == ElementValue.ATTRIBUTE ? Node.ATTRIBUTE_NODE : Node.ELEMENT_NODE);
+                storedNode.setNodeType(nodeType);
                 getAddress(doc, storedNode);
                 resultSet.add(storedNode);
             }
diff --git a/extensions/indexes/range/test/src/xquery/field-type.xql b/extensions/indexes/range/test/src/xquery/field-type.xql
new file mode 100644
index 000000000..e01a7da2e
--- /dev/null
+++ b/extensions/indexes/range/test/src/xquery/field-type.xql
@@ -0,0 +1,79 @@
+xquery version "3.1";
+
+module namespace rt="combined-range-function-signature-test";
+
+declare namespace test="http://exist-db.org/xquery/xqsuite";
+
+declare variable $rt:COLLECTION_CONFIG := 
+    <collection xmlns="http://exist-db.org/collection-config/1.0">
+        <index xmlns:xs="http://www.w3.org/2001/XMLSchema">
+            <range>
+                <create match="//note">
+                    <field name="note-type" match="@type" type="xs:string"/>
+                </create>
+            </range>
+        </index>
+    </collection>;
+
+declare variable $rt:DATA :=
+    <root>
+        <div>
+            <head>Telegram 294530 From the Department of State to the Consulate in Montreal<note
+                    type="source">Source: National Archives, RG 59, Central Files 1967-69, POL 27
+                    ARAB-ISR. Unclassified. Drafted by Loy (E/TT), cleared by Roger P. Davies (NEA) and
+                    Styles (E/OA/AVP), and approved by Rusk.</note>
+                <note type="summary">A message from Deputy Assistant Secretary of State Loy to IATA
+                    Director-General Knut Hammarskjold expressing U.S. concern about recent hijackings.
+                    Loy condemned Israel for the attack on Khaldeh Airport in Lebanon and noted that the
+                    U.S. had registered disapproval of the Athens hijacking of an El Al aircraft.</note>
+            </head>
+        </div>
+    </root>;
+
+declare variable $rt:INDEXED_COLLECTION_NAME := "test-indexed";
+declare variable $rt:INDEXED_COLLECTION := "/db/" || $rt:INDEXED_COLLECTION_NAME;
+
+declare variable $rt:NON_INDEXED_COLLECTION_NAME := "test-non-indexed";
+declare variable $rt:NON_INDEXED_COLLECTION := "/db/" || $rt:NON_INDEXED_COLLECTION_NAME;
+
+declare
+    %test:setUp
+function rt:setup() {
+    xmldb:create-collection("/db/system/config/db", $rt:INDEXED_COLLECTION_NAME),
+    xmldb:store("/db/system/config/db/" || $rt:INDEXED_COLLECTION_NAME, "collection.xconf", $rt:COLLECTION_CONFIG),
+    xmldb:create-collection("/db", $rt:INDEXED_COLLECTION_NAME),
+    xmldb:store($rt:INDEXED_COLLECTION_NAME, "test.xml", $rt:DATA),
+    xmldb:create-collection("/db", $rt:NON_INDEXED_COLLECTION_NAME),
+    xmldb:store($rt:NON_INDEXED_COLLECTION_NAME, "test.xml", $rt:DATA)
+};
+
+declare
+    %test:tearDown
+function rt:cleanup() {
+    xmldb:remove($rt:INDEXED_COLLECTION_NAME),
+    xmldb:remove("/db/system/config/db/" || $rt:INDEXED_COLLECTION_NAME),
+    xmldb:remove($rt:NON_INDEXED_COLLECTION_NAME),
+    xmldb:remove("/db/system/config/db/" || $rt:NON_INDEXED_COLLECTION_NAME)
+};
+
+declare function rt:get-note($div as element(div)) as element(note)  {
+    $div//note[@type='summary']
+};
+
+(:~
+ : Check indexed collection. This query should return one element. 
+ :)
+declare
+    %test:assertXPath('/@type = "summary"')
+function rt:test-indexed-collection() {
+    rt:get-note(collection($rt:INDEXED_COLLECTION_NAME)//div)
+};
+
+(:~
+ : Check non-indexed collection. This query should return one element. 
+ :)
+declare
+    %test:assertXPath('/@type = "summary"')
+function rt:test-non-indexed-collection() {
+    rt:get-note(collection($rt:NON_INDEXED_COLLECTION_NAME)//div)
+};
\ No newline at end of file
diff --git a/extensions/indexes/range/test/src/xquery/suite-types.xql b/extensions/indexes/range/test/src/xquery/suite-types.xql
index bc77f90e9..13ae0174b 100644
--- a/extensions/indexes/range/test/src/xquery/suite-types.xql
+++ b/extensions/indexes/range/test/src/xquery/suite-types.xql
@@ -3,6 +3,10 @@ xquery version "3.0";
 import module namespace test="http://exist-db.org/xquery/xqsuite"
 at "resource:org/exist/xquery/lib/xqsuite/xqsuite.xql";
 
-import module namespace rtt="http://exist-db.org/xquery/range/types/test" at "file:extensions/indexes/range/test/src/xquery/types.xql";
+import module namespace rt="http://exist-db.org/xquery/range/test/fields" at "file:extensions/indexes/range/test/src/xquery/fields.xql";
+import module namespace st="combined-range-function-signature-test" at "file:extensions/indexes/range/test/src/xquery/field-type.xql";
 
-test:suite(util:list-functions(xs:anyURI("http://exist-db.org/xquery/range/types/test")))
\ No newline at end of file
+test:suite((
+    util:list-functions(xs:anyURI("http://exist-db.org/xquery/range/test/fields")),
+    util:list-functions(xs:anyURI("combined-range-function-signature-test"))
+))
\ No newline at end of file
