openapi: 3.0.3
info:
  title: Sketch Engine - API documentation
  description: "An **application programming interface** (API) is a set of rules and\
    \ protocols that allow different software applications to communicate with each\
    \ other.\n                    \n\nIn the context of Sketch Engine, the API provides\
    \ a standardized way for developers to access and use Sketch Engine's language\
    \ data and text analysis \n                    tools in their own software applications.\
    \ It is useful for anyone who needs to work with text, from analyzing text data\
    \ such as searching collocations, \n                    generating word lists\
    \ and keywords, and building text corpora (databases of written language), etc.\
    \ With the API, developers can integrate these features \n                   \
    \ into their own applications and create custom text analysis tools.\n\n     \
    \               \n\nThis **API documentation** outlines the Sketch Engine endpoints\
    \ used mainly for working with corpora, including their creation, compilation\
    \ and various \n                    functions such as word sketches, concordances,\
    \ etc. The documentation describes the **requests** and responses of API calls,\
    \ with most responses provided in \n                    either **JSON** or **plain\
    \ text** format.\n\n                    \n\nYou can try every endpoint by **authenticating**\
    \ with your **API key**, clicking **Try it out** on the endpoint you want to use,\
    \ filling in the requested parameters, \n                    and executing the\
    \ query.\n\n                    \n\nIt is **recommended** to use your **Sketch\
    \ Engine API key** for **authentication** when calling the endpoints, otherwise\
    \ it does not have to work. \n                    The **key** can be retrieved\
    \ from the Sketch Engine dashboard by following these steps: select **More options**\
    \ (upper right corner), then click on **My Account**.\n\n                    \n\
    \n**Last update:** `30th October 2023`"
  version: 2.0.0
  termsOfService: https://www.sketchengine.eu/terms-of-use/
  contact:
    name: Support
    url: https://www.sketchengine.eu/contact-us/
externalDocs:
  description: former API documentation
  url: https://www.sketchengine.eu/documentation/api-documentation/
servers:
<!--#if expr="$HTTP_X_FORWARDED_PROTO" -->- url: <!--#echo var="HTTP_X_FORWARDED_PROTO" -->://<!--#echo var="HTTP_HOST" -->
<!--#else -->- url: http://<!--#echo var="HTTP_HOST" --><!--#endif -->
tags:
- name: Corpus Search
  description: Description of endpoints that perform more specific actions on corpora
    (word sketches, concordances).
paths:
  /search/corp_info:
    get:
      operationId: getCorpInfo
      parameters:
      - $ref: '#/components/parameters/001_corpname'
      - $ref: '#/components/parameters/002_usesubcorp'
      - $ref: '#/components/parameters/006_subcorpora'
      - $ref: '#/components/parameters/003_gramrels'
      - $ref: '#/components/parameters/004_corpcheck'
      - $ref: '#/components/parameters/005_registry'
      - $ref: '#/components/parameters/007_struct_attr_stats'
      - $ref: '#/components/parameters/008_format'
      tags:
      - Corpus Search
      summary: Provides detailed information about the specified corpus.
      description: "-"
      responses:
        '200':
          description: '`OK`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/01_corp_info'
  /search/wordlist:
    get:
      operationId: getWordList
      parameters:
      - $ref: '#/components/parameters/001_corpname'
      - $ref: '#/components/parameters/010_wlattr'
      - $ref: '#/components/parameters/002_usesubcorp'
      - $ref: '#/components/parameters/011_wlnums'
      - $ref: '#/components/parameters/072_wlmaxfreq'
      - $ref: '#/components/parameters/012_wlminfreq'
      - $ref: '#/components/parameters/013_wlmaxitems'
      - $ref: '#/components/parameters/014_wlpat'
      - $ref: '#/components/parameters/015_wlsort'
      - $ref: '#/components/parameters/019_wlblacklist'
      - $ref: '#/components/parameters/073_include_nonwords'
      - $ref: '#/components/parameters/091_relfreq'
      - $ref: '#/components/parameters/092_reldocf'
      - $ref: '#/components/parameters/018_wlfile'
      - $ref: '#/components/parameters/071_wlicase'
      - $ref: '#/components/parameters/093_wlpage'
      - $ref: '#/components/parameters/074_random'
      - $ref: '#/components/parameters/008_format'
      - $ref: '#/components/parameters/089_wltype'
      - $ref: '#/components/parameters/063_ngrams_n'
      - $ref: '#/components/parameters/087_ngrams_max_n'
      - $ref: '#/components/parameters/112_nest_ngrams'
      - $ref: '#/components/parameters/057_simple_n'
      - $ref: '#/components/parameters/088_usengrams'
      tags:
      - Corpus Search
      summary: Provides a list of word frequencies in the specified corpus.
      description: By default is it ordered by absolute frequency.
      responses:
        '200':
          description: '`OK`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/02_wordlist'
  /search/struct_wordlist:
    get:
      operationId: getStructWordList
      parameters:
      - $ref: '#/components/parameters/001_corpname'
      - $ref: '#/components/parameters/010_wlattr'
      - $ref: '#/components/parameters/090_wlstruct_attr1'
      - $ref: '#/components/parameters/102_wlstruct_attr2'
      - $ref: '#/components/parameters/103_wlstruct_attr3'
      - $ref: '#/components/parameters/011_wlnums'
      - $ref: '#/components/parameters/072_wlmaxfreq'
      - $ref: '#/components/parameters/012_wlminfreq'
      - $ref: '#/components/parameters/013_wlmaxitems'
      - $ref: '#/components/parameters/014_wlpat'
      - $ref: '#/components/parameters/015_wlsort'
      - $ref: '#/components/parameters/019_wlblacklist'
      - $ref: '#/components/parameters/073_include_nonwords'
      - $ref: '#/components/parameters/091_relfreq'
      - $ref: '#/components/parameters/092_reldocf'
      - $ref: '#/components/parameters/071_wlicase'
      - $ref: '#/components/parameters/093_wlpage'
      - $ref: '#/components/parameters/074_random'
      - $ref: '#/components/parameters/008_format'
      - $ref: '#/components/parameters/089_wltype'
      tags:
      - Corpus Search
      summary: Provides a list of frequencies in the specified corpus. Offers more
        flexibility.
      description: The difference from the wordlist is that this enpoint allows to
        customize how the results are displayed.
      responses:
        '200':
          description: '`OK`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/12_struct_wordlist'
  /search/attr_vals:
    get:
      operationId: getAttrVals
      parameters:
      - $ref: '#/components/parameters/001_corpname'
      - $ref: '#/components/parameters/020_avattr'
      - $ref: '#/components/parameters/021_avpat'
      - $ref: '#/components/parameters/023_avfrom'
      - $ref: '#/components/parameters/022_avmaxitems'
      - $ref: '#/components/parameters/104_icase'
      - $ref: '#/components/parameters/008_format'
      tags:
      - Corpus Search
      summary: Provides a list of values for a given structure attribute (avattr).
      description: The attributes represent the text types.
      responses:
        '200':
          description: '`OK`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/09_attr_vals'
  /search/concordance:
    get:
      operationId: getConcordance
      parameters:
      - $ref: '#/components/parameters/001_corpname'
      - $ref: '#/components/parameters/041_q'
      - $ref: '#/components/parameters/127_concordance_query_queryselector'
      - $ref: '#/components/parameters/128_concordance_query_iquery'
      - $ref: '#/components/parameters/129_concordance_query_cql'
      - $ref: '#/components/parameters/130_concordance_query_lemma'
      - $ref: '#/components/parameters/131_concordance_query_char'
      - $ref: '#/components/parameters/132_concordance_query_word'
      - $ref: '#/components/parameters/133_concordance_query_phrase'
      - $ref: '#/components/parameters/002_usesubcorp'
      - $ref: '#/components/parameters/025_lpos'
      - $ref: '#/components/parameters/077_default_attr'
      - $ref: '#/components/parameters/058_attrs'
      - $ref: '#/components/parameters/078_refs'
      - $ref: '#/components/parameters/079_attr_allpos'
      - $ref: '#/components/parameters/080_viewmode'
      - $ref: '#/components/parameters/081_cup_hl'
      - $ref: '#/components/parameters/082_structs'
      - $ref: '#/components/parameters/083_fromp'
      - $ref: '#/components/parameters/084_pagesize'
      - $ref: '#/components/parameters/085_kwicleftctx'
      - $ref: '#/components/parameters/086_kwicrightctx'
      - $ref: '#/components/parameters/134_errcorr_switch'
      - $ref: '#/components/parameters/135_cup_err_code'
      - $ref: '#/components/parameters/136_cup_err'
      - $ref: '#/components/parameters/137_cup_corr'
      - $ref: '#/components/parameters/040_json'
      - $ref: '#/components/parameters/039_asyn'
      - $ref: '#/components/parameters/008_format'
      tags:
      - Corpus Search
      summary: Provides concordance.
      description: "Examples of word usage in context. \n\nIt is possible to send\
        \ the parameters directly or via the `json` parameter. The concordance_query\
        \ parameters are preffered to send via the json."
      responses:
        '200':
          description: '`OK`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/06_concordance'
  /search/fullref:
    get:
      operationId: getFullRef
      description: "-"
      parameters:
      - $ref: '#/components/parameters/001_corpname'
      - $ref: '#/components/parameters/111_pos'
      summary: Select the metadata to be displayed in the concordance.
      tags:
      - Corpus Search
      responses:
        '200':
          description: '`OK`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/14_fullref'
  /search/widectx:
    get:
      operationId: getWideCtx
      parameters:
      - $ref: '#/components/parameters/001_corpname'
      - $ref: '#/components/parameters/111_pos'
      - $ref: '#/components/parameters/138_hitlen'
      - $ref: '#/components/parameters/082_structs'
      - $ref: '#/components/parameters/139_detail_left_ctx'
      - $ref: '#/components/parameters/140_detail_right_ctx'
      summary: Provides more details about concordance item context.
      description: "-"
      tags:
      - Corpus Search
      responses:
        '200':
          description: '`OK`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/16_widectx'
  /search/freqml:
    get:
      operationId: getFreqMl
      tags:
      - Corpus Search
      summary: Provides frequency statistics.
      description: "-"
      parameters:
      - $ref: '#/components/parameters/001_corpname'
      - $ref: '#/components/parameters/100_ml1attr'
      - $ref: '#/components/parameters/101_ml1ctx'
      - $ref: '#/components/parameters/041_q'
      - $ref: '#/components/parameters/002_usesubcorp'
      - $ref: '#/components/parameters/044_fmaxitems'
      - $ref: '#/components/parameters/094_fpage'
      - $ref: '#/components/parameters/095_group'
      - $ref: '#/components/parameters/096_showpoc'
      - $ref: '#/components/parameters/097_showreltt'
      - $ref: '#/components/parameters/098_showrel'
      - $ref: '#/components/parameters/099_freqlevel'
      - $ref: '#/components/parameters/040_json'
      - $ref: '#/components/parameters/045_freq_sort'
      - $ref: '#/components/parameters/008_format'
      responses:
        '200':
          description: '`OK`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/11_freqml'
  /search/freq_distrib:
    get:
      operationId: getFregDistrib
      parameters:
      - $ref: '#/components/parameters/001_corpname'
      - $ref: '#/components/parameters/118_res'
      - $ref: '#/components/parameters/025_lpos'
      - $ref: '#/components/parameters/077_default_attr'
      - $ref: '#/components/parameters/058_attrs'
      - $ref: '#/components/parameters/082_structs'
      - $ref: '#/components/parameters/078_refs'
      - $ref: '#/components/parameters/079_attr_allpos'
      - $ref: '#/components/parameters/080_viewmode'
      - $ref: '#/components/parameters/120_fc_lemword_window_type'
      - $ref: '#/components/parameters/121_fc_lemword_wsize'
      - $ref: '#/components/parameters/122_fc_lemword_type'
      - $ref: '#/components/parameters/125_fc_pos_window_type'
      - $ref: '#/components/parameters/123_fc_pos_wsize'
      - $ref: '#/components/parameters/124_fc_pos_type'
      - $ref: '#/components/parameters/040_json'
      - $ref: '#/components/parameters/119_normalize'
      - $ref: '#/components/parameters/008_format'
      summary: Provides the distribution of hits in the corpus
      description: "-"
      tags:
      - Corpus Search
      responses:
        '200':
          description: '`OK`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/13_freq_distrib'
  /search/subcorp:
    get:
      operationId: getSubCorp
      parameters:
      - $ref: '#/components/parameters/001_corpname'
      - $ref: '#/components/parameters/055_delete'
      tags:
      - Corpus Search
      summary: Get list of avaible subcorporas in corpus.
      description: "-"
      responses:
        '200':
          description: '`OK`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/07_subcorp'
  /search/extract_keywords:
    get:
      operationId: getExtractKeywords
      parameters:
      - $ref: '#/components/parameters/001_corpname'
      - $ref: '#/components/parameters/056_ref_corpname'
      - $ref: '#/components/parameters/002_usesubcorp'
      - $ref: '#/components/parameters/008_format'
      - $ref: '#/components/parameters/057_simple_n'
      - $ref: '#/components/parameters/018_wlfile'
      - $ref: '#/components/parameters/019_wlblacklist'
      - $ref: '#/components/parameters/115_attr'
      - $ref: '#/components/parameters/060_alnum'
      - $ref: '#/components/parameters/061_oneaplha'
      - $ref: '#/components/parameters/027_minfreq'
      - $ref: '#/components/parameters/062_max_keywords'
      - $ref: '#/components/parameters/063_ngrams_n'
      - $ref: '#/components/parameters/073_include_nonwords'
      - $ref: '#/components/parameters/104_icase'
      - $ref: '#/components/parameters/116_k_attr'
      - $ref: '#/components/parameters/113_maxfreq'
      - $ref: '#/components/parameters/114_keywords'
      - $ref: '#/components/parameters/117_terms'
      - $ref: '#/components/parameters/014_wlpat'
      - $ref: '#/components/parameters/092_reldocf'
      tags:
      - Corpus Search
      summary: Provides keyword extraction from corpus
      description: Allows you to extract singleword keywords from your (user) corpora.
        This method might take some time, so be patient especially for large reference
        corpora.
      responses:
        '200':
          description: '`OK`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/08_extract_keywords'
  /search/textypes_with_norms:
    get:
      operationId: getTextTypesWithNorms
      parameters:
      - $ref: '#/components/parameters/001_corpname'
      summary: Provides textypes with norms for specified corpus
      description: "-"
      tags:
      - Corpus Search
      responses:
        '200':
          description: '`OK`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/15_textypes_with_norms'
components:
  parameters:
    001_corpname:
      in: query
      name: corpname
      schema:
        type: string
      required: true
      description: Corpus name. To query your own corpus (e.g. username john, corpus
        mycorpus), `use` value `user/john/mycorpus`.
      example: preloaded/bnc2_tt21
    002_usesubcorp:
      in: query
      name: usesubcorp
      schema:
        type: string
      description: The name of the `subcorpus` you want to process. The `default`
        value is `empty string`, which means working with the entire corpus. An example
        for `preloaded/bnc2_tt21` can be `Written Academic` or `1960-1974`.
    003_gramrels:
      in: query
      name: gramrels
      schema:
        type: integer
        enum:
        - 0
        - 1
      description: Parameter that provides a list of grammatical relations from the
        correspoding `sketch grammar`.
    004_corpcheck:
      in: query
      name: corpcheck
      schema:
        type: integer
        enum:
        - 0
        - 1
      description: Parameter to obtain results from the last corpcheck (if available
        in compilation log).
    005_registry:
      in: query
      name: registry
      schema:
        type: integer
        enum:
        - 0
        - 1
      description: Parameter that provides the content of thr registry file (registry_dump
        and registry_text).
    006_subcorpora:
      in: query
      name: subcorpora
      schema:
        type: integer
        enum:
        - 0
        - 1
      description: Parameter to obtain the list of subcorpora and their respective
        sizes (e.g. number of tokens, words).
    007_struct_attr_stats:
      in: query
      name: struct_attr_stats
      schema:
        type: integer
        enum:
        - 0
        - 1
      description: Parameter to provide the lexicon sizes for structure attributes.
    008_format:
      in: query
      name: format
      schema:
        type: string
        enum:
        - json
        - xml
        - csv
        - tsv
        - txt
        - xls
      description: The `format` of the output. `Empty value` is interpreted as `JSON`.
        Not every endpoint support all formats.
    010_wlattr:
      in: query
      name: wlattr
      schema:
        type: string
        example: word
      required: true
      description: Parameter to set the corpus attribute you want to work with. For
        different languages there could be more options, like predefined pos (e.g
        Czech language).
    011_wlnums:
      in: query
      name: wlnums
      schema:
        type: string
        default: frq
        enum:
        - frq
        - docf
        - arf
      description: 'A type of frequency. The shortcuts means: `frq` -> frequency,
        `docf` -> document. `arf` -> average reduced frequency.'
    012_wlminfreq:
      in: query
      name: wlminfreq
      schema:
        type: integer
      description: Parameter for setting the minimum frequency limit. Attributes with
        lower frequency that this limit do not appear in the resulting frequency list.
    013_wlmaxitems:
      in: query
      name: wlmaxitems
      schema:
        type: integer
      description: Parameter to set number of items to be returned in the API response.
        Actual value can be limited depending on a corpus, but is not limited for
        user corpora. This parameter is often used with `wlpage`.
      example: 100
    014_wlpat:
      in: query
      name: wlpat
      schema:
        type: string
      description: Parameter to set a regex expression to filter the results according
        your preferences. Relevant only in a simple wordlist.
      example: .*
    015_wlsort:
      in: query
      name: wlsort
      schema:
        type: string
        enum:
        - frq
        - docf
      description: Parameter that sets the way of sorting the results. In the wordlist
        the default sorting is `frq`. The resulting wordlist will be sorted by absolute
        frequency. Docf means document frequency.
    018_wlfile:
      in: query
      name: wlfile
      schema:
        type: string
      description: Allows to send a list of allowlist. Similar to wlblacklist.
    019_wlblacklist:
      in: query
      name: wlblacklist
      schema:
        type: string
      description: Parameter to set the blacklist. The blacklist is a list of words
        you do not want in the wordlist output. The values of this list are separated
        by a newline symbol (without commas between values). In the URL the newline
        symbol is represented with `%0A`.
    020_avattr:
      in: query
      name: avattr
      schema:
        type: string
      required: true
      example: bncdoc.alltyp
      description: Parameter to select a text type attribute. Every corpus can have
        different number and types of these attributes. You can find them in response
        of `corpus_info` method in `freqttattrs` or `subcorpattrs` keys. Not all of
        them have attributes to show.
    021_avpat:
      in: query
      name: avpat
      schema:
        type: string
      description: Parameter to set a regex expression to filter the results according
        your preferences. Empty string means match everything `.*`.
    022_avmaxitems:
      in: query
      name: avmaxitems
      schema:
        type: integer
      description: The number of items to be returned if possible.
    023_avfrom:
      in: query
      name: avfrom
      schema:
        type: integer
      description: To set starting index from which you want to se the results.
    025_lpos:
      in: query
      name: lpos
      schema:
        type: string
        enum:
        - -n
        - -v
        - -j
        - -a
        - -d
        - -i
      description: Parameter to select the lemma part of speech. Supported lposes
        depend on the corpus. If the corpus contains `lempos` attribute and lpos attribute
        is omitted, it is automatically replaced by the most frequent lpos for the
        specified lemma. Otherwise, it has no effect.
    027_minfreq:
      in: query
      name: minfreq
      schema:
        type: string
      description: Minimum frequency of a collocates. `Auto` is an automatic option.
        Collocates with a frequency below this limit will not be displayed. If it
        is not 'auto' it is integer.
      example: auto
    039_asyn:
      in: query
      name: asyn
      schema:
        type: integer
        enum:
        - 0
        - 1
      description: Parameter to turn on / off the asynchronous processing of the query.
        Which means that you obtain an initial part of the result before the complete
        result is computed. Usually it is `turned on` (asyn set to 1) in the web interface
        when the user want to see the results instantly.
    040_json:
      in: query
      name: json
      schema:
        type: object
        example: 
          concordance_query:
           - queryselector: iqueryrow
             iquery: "test"
      description: "A voluntary option to **wrap parameter**. Used to cover more complex\
        \ object parameter like `concordance query`. Technically it is possible to\
        \ sent all parametres via this parameter only.\n\n The most often properties\
        \ are:\n\n `queryselector`: To select prefered query type. Supported options\
        \ are: **cqlrow**, **iqueryrow**, **lemmarow**, **charrow**, **phraserow**,\
        \ **wordrow**. For more information see concordance_query parameters.\n\n\
        \ `iquery`: Use if `iqueryrow` is selected. Finds words which match the search\
        \ word(s) or whose lemma (base form) matches the search word. It is not case\
        \ sensitive by default. Type a word, phrase or use simplified version of regex.\
        \ Use an asterisk (*) for any number of unspecified characters. Use a question\
        \ mark (?) for exactly one unspecified character. Use the pipe (|) to include\
        \ more than one word or phrase. Use two hyphens (--) to search for a word\
        \ that can be hyphenated, non-hyphenated or spelt as two separate words.\n\
        \n `cql`: Use if `cqlrow` is selected. The Corpus Query Language is used for\
        \ complex searches of lexical and grammatical structures and for searches\
        \ with unspecific criteria. [CQL](https://www.sketchengine.eu/documentation/corpus-querying/).\n\
        \n\n`lemma`: Use if lemmarow is selected. The searched lemma.\n\n `lpos`:\
        \ Lemma part of speech. The part of speech of the searched lemma.\n\n `qmcase`:\
        \ Case sensitivity. Boolean value. False means case insensivity.\n\n\n`char`:\
        \ Use if charrow is selected. The searched character.\n\n `phrase`: Use if\
        \ phraserow is selected. The searched phrase.\n\n `word`: Use if wordrow is\
        \ selected. The searched word.\n\n\n`name`: \n\n `pnfilter`: \n\n `inclkwic`:\
        \ \n\n `filfpos`: \n\n `filtpos`: \n\n `desc`: \n\n `q`: \n\n"
    041_q:
      in: query
      name: q
      schema:
        type: string
      example: q[lemma="test"]
      description: The query for selected query type. Regexes are supported for `lemma`,
        `phrase` and `word` types. The `iquery` supports simplified version of regex
        (see concordance_query[iquery]). If you decide to use the concordance_query
        in json parameter you do not have to use this parameter.
    044_fmaxitems:
      in: query
      name: fmaxitems
      schema:
        type: integer
        default: 50
      description: Parameter to set the maximum number of items to be returned in
        the response.
    045_freq_sort:
      in: query
      name: freq_sort
      schema:
        type: string
        default: freq
      description: Identifier of column according to which should be the output sorted
        (its number counted from 0) or `freq` (default), that means sorting according
        to frequency.
    055_delete:
      in: query
      name: delete
      schema:
        type: string
      description: The name of subcorpus you want to delete.
    056_ref_corpname:
      in: query
      name: ref_corpname
      schema:
        type: string
      required: true
      description: Corpus name of the reference corpus, it must have the same processing
        (the same attributes, the same term grammar).
    057_simple_n:
      in: query
      name: simple_n
      schema:
        type: integer
        default: 1
    058_attrs:
      in: query
      name: attrs
      schema:
        type: string
        default: word
      description: Parameter to set the list of comma-delimited attributes that are
        returned for context tokens. Other examples can be:`word, lemma , tag`.
    060_alnum:
      in: query
      name: alnum
      schema:
        type: integer
        default: 0
      description: Whether all characters should be alphanumerical.
    061_oneaplha:
      in: query
      name: oneaplha
      schema:
        type: integer
        default: 1
      description: Whether items should contain at least one alphanumerical character.
    062_max_keywords:
      in: query
      name: max_keywords
      schema:
        type: integer
        default: 100
        description: The number of items to be returned in the response.
    063_ngrams_n:
      in: query
      name: ngrams_n
      schema:
        type: integer
        enum:
        - 2
        - 3
        - 4
        - 5
      description: The start length of n-gram to be extracted. Usually used with `ngrams_max_n`
        and `usengrams`.
    071_wlicase:
      in: query
      name: wlicase
      schema:
        type: integer
        enum:
        - 1
        - 0
      description: Parameter to set case sensitiveness. One means that case sensitivity
        is off, zero means it is on.
    072_wlmaxfreq:
      in: query
      name: wlmaxfreq
      schema:
        type: integer
      description: Parameter to set upper limit for frequency in wordlist.
    073_include_nonwords:
      in: query
      name: include_nonwords
      schema:
        type: integer
        enum:
        - 1
        - 0
      description: Parameter to set if nonwords should be contained in the output
        of the wordlist. Nonwords are tokens which do not start with letter of the
        alphabet (e.g. numbers, punctuation). The regex to match the nonwords is `[^[:alpha:]].*`.
    074_random:
      in: query
      name: random
      schema:
        type: integer
        enum:
        - 1
        - 0
      description: Parameter that represents if the wordlist is created from the first
        10 milions lines of corpus. One if yes, no if he wordlist is created from
        the whole corpus.
    077_default_attr:
      in: query
      name: default_attr
      schema:
        type: string
      description: Attribute that is set as default, usually lemma.
    078_refs:
      in: query
      name: refs
      schema:
        type: string
        example: =bncdoc.alltyp
      description: Parameter to select a text type attribute to use for calculation
        of the corcondance. By default the `bncdoc.alltyp` is used (all available
        texts are used). Every corpus can have different number and types of these
        attributes. You can find them in response of `corpus_info` method in `freqttattrs`
        or `subcorpattrs` keys. Not all of them have attributes to show.
    079_attr_allpos:
      in: query
      name: attr_allpos
      schema:
        type: string
        example: all
      description: All attrs should be applied to all resulting tokens (left and right).
    080_viewmode:
      in: query
      name: viewmode
      schema:
        type: string
        enum:
        - sen
        - kwic
      description: This parameter is used to determine the view mode. When set to
        sen, it displays the full sentences containing the searched item without any
        trimming. Alternatively, when set to kwic, the searched item is presented
        at the center of a trimmed context for clarity.
    081_cup_hl:
      in: query
      name: cup_hl
      schema:
        type: string
        enum:
        - q
        - e
        - c
        - b
      description: "Parameter to select which part of the result should be highlighted.\
        \ It is set to 'q' if used with corpus without error annotation. Meaning of\
        \ individual options:\n\n - `q` -> to higlight query result.\n\n - `e` ->\
        \ to higlight error words.\n\n - `c` -> to highlight corrected words.\n\n\
        \ - `b` -> to highlight both groups (error and corrected).\n\n The options\
        \ e, c, b are usually used with corpus with avaible error annotation. Example\
        \ of such a corpus can be `preloaded/enwiki_error_sample_sentences`."
    082_structs:
      in: query
      name: structs
      schema:
        type: string
        example: s,g
      description: Parameter to set the list of comma-delimited structure tags that
        are returned/applied. Other possible options if you want to work with corpus
        with error annotations are `err`, `corr`.
    083_fromp:
      in: query
      name: fromp
      schema:
        type: integer
        example: 1
      description: The number of the page that are returned.
    084_pagesize:
      in: query
      name: pagesize
      schema:
        type: integer
        example: 20
      description: Parameter to set the number of lines for the resulting concordance.
    085_kwicleftctx:
      in: query
      name: kwicleftctx
      schema:
        type: string
        example: 100#
      description: Parameter to set the size of the left context in KWIC view.
    086_kwicrightctx:
      in: query
      name: kwicrightctx
      schema:
        type: string
        example: 100#
      description: Parameter to set the size of the right context in KWIC view.
    087_ngrams_max_n:
      in: query
      name: ngrams_max_n
      schema:
        type: integer
        enum:
        - 2
        - 3
        - 4
        - 5
        - 6
      description: N-gram lengh. Maximum is `6`.
    088_usengrams:
      in: query
      name: ngrams_n
      schema:
        type: integer
        enum:
        - 0
        - 1
      description: Represent if n-grams should be extracted or just simple keywords.
    089_wltype:
      in: query
      name: wltype
      schema:
        type: string
        enum:
        - simple
        - struct_wordlist
        example: simple
      description: Parameter to set the format of ouput. Is it always set to `simple`,
        for the `struct_wordlist` is another enpoint called `struct_wordlist`.
      deprecated: true
    090_wlstruct_attr1:
      in: query
      name: wlstruct_attr1
      schema:
        type: string
        enum:
        - word
        - lemma
        - tag
        - lempos
      description: Parameter to set what attributes you want to see in wordlist result.
        You can select max 3 attributes to show in the result (see wlstruct_attr2
        and wlstruct_attr3). There can be some differences in number of options you
        can select (e.g. Czech language).
      required: true
    091_relfreq:
      in: query
      name: relfreq
      schema:
        type: integer
        enum:
        - 1
        - 0
      description: Parameter to set whether to calculate the relative frequency for
        each item or not.
    092_reldocf:
      in: query
      name: reldocf
      schema:
        type: integer
        enum:
        - 1
        - 0
      description: Parameter to set whether to calculate the document frequency for
        each item or not. Must be used with `wlsort` set to `docf`.
    093_wlpage:
      in: query
      name: wlpage
      schema:
        type: integer
      description: Used to select page of the response. The number of items on the
        page is specified by parameter `wlmaxitems`. The upper limit of response is
        usually limited to 1000 items (wllimit).
    094_fpage:
      in: query
      name: fpage
      schema:
        type: integer
      description: Used to select page of the response. The number of items on the
        page is specified by parameter `fmaxitems`.
    095_group:
      in: query
      name: group
      schema:
        type: integer
        enum:
        - 1
        - 0
      description: If frequencies are counted for more attributes (e.g. m1attr, m2attr)
        the results can be groupped by first column/attribute.
    096_showpoc:
      in: query
      name: showpoc
      schema:
        type: integer
        enum:
        - 1
        - 0
    097_showreltt:
      in: query
      name: showreltt
      schema:
        type: integer
        enum:
        - 1
        - 0
    098_showrel:
      in: query
      name: showrel
      schema:
        type: integer
        enum:
        - 1
        - 0
    099_freqlevel:
      in: query
      name: freqlevel
      schema:
        type: integer
        enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      description: The number of attributes for which the frequencies should be counted.
    100_ml1attr:
      in: query
      name: ml1attr
      required: true
      schema:
        type: string
        example: word
      description: "Any [attributes](https://www.sketchengine.eu/guide/corpus-info-page/)\
        \ for specified corpus can be counted.\n\n Frequencies can be counted for\
        \ maximum of the 6 attributes, need to be set as e.g. ml2attr, ml3attr. At\
        \ least one attribute is required, the others are optional."
    101_ml1ctx:
      in: query
      name: ml1ctx
      required: true
      schema:
        type: string
        example: -1<0
      description: Position of the selected attribute in the concordance. Minus means
        left context (-1<0). Plus means right context (6>0). At least one attribute
        is required, the others are optional. Every attribute needs it's own context
        position (e.g. if 3 attributes are selected three context position needs to
        be set ml1ctx, ml2ctx, ml3ctx).
    102_wlstruct_attr2:
      in: query
      name: wlstruct_attr2
      schema:
        type: string
        enum:
        - word
        - lemma
        - tag
        - lempos
      description: Has the same purpose as the `wlstruct_attr1` but its voluntary.
    103_wlstruct_attr3:
      in: query
      name: wlstruct_attr3
      schema:
        type: string
        enum:
        - word
        - lemma
        - tag
        - lempos
      description: Has the same purpose as the `wlstruct_attr1` but its voluntary.
    104_icase:
      in: query
      name: icase
      schema:
        type: integer
        enum:
        - 1
        - 0
      description: Parameter to set case sensitiveness. One means that case sensitivity
        is off, zero means it is on.
    111_pos:
      in: query
      name: pos
      schema:
        type: integer
        example: 10336
      description: Position of the result in the concordance.
    112_nest_ngrams:
      in: query
      name: nest_ngrams
      schema:
        type: integer
        enum:
        - 1
        - 0
      description: ''
    113_maxfreq:
      in: query
      name: maxfreq
      schema:
        type: integer
      description: Maximum frequency of a collocates. Collocates with a frequency
        above this limit will not be displayed.
    114_keywords:
      in: query
      name: keywords
      schema:
        type: integer
        enum:
        - 1
        - 0
      description: ''
    115_attr:
      in: query
      name: attr
      schema:
        type: string
        default: word
        enum:
        - lemma
        - word
        - TERM
      description: Parameter to set the attribute that is returned for context tokens.
    116_k_attr:
      in: query
      name: k_attr
      schema:
        type: string
        default: word
        enum:
        - lemma
        - word
      description: Parameter to set the keyword attribute that is returned for context
        tokens.
    117_terms:
      in: query
      name: terms
      schema:
        type: integer
        enum:
        - 1
        - 0
      description: ''
    118_res:
      in: query
      name: res
      schema:
        type: integer
        example: 50
      description: ''
    119_normalize:
      in: query
      name: normalize
      schema:
        type: integer
        example: 0
      description: ''
    120_fc_lemword_window_type:
      in: query
      name: fc_lemword_window_type
      schema:
        type: string
        example: both
      description: ''
    121_fc_lemword_wsize:
      in: query
      name: fc_lemword_wsize
      schema:
        type: integer
        example: 5
      description: ''
    122_fc_lemword_type:
      in: query
      name: fc_lemword_type
      schema:
        type: string
        example: all
      description: ''
    123_fc_pos_wsize:
      in: query
      name: fc_pos_wsize
      schema:
        type: integer
        example: 5
      description: ''
    124_fc_pos_type:
      in: query
      name: fc_pos_type
      schema:
        type: string
        example: all
      description: ''
    125_fc_pos_window_type:
      in: query
      name: fc_pos_window_type
      schema:
        type: integer
        example: 5
      description: ''
    127_concordance_query_queryselector:
      in: query
      name: concordance_query[queryselector]
      schema:
        type: string
        enum:
        - iquery
        - cqlrow
        - lemmarow
        - charrow
        - wordrow
        - phraserow
      description: Parameter to select the query type you want to use. You can send
        it directly or via the `json` parameter, the results would be the same.
    128_concordance_query_iquery:
      in: query
      name: concordance_query[iquery]
      schema:
        type: string
      description: "Use this parameter only if `queryselector` is set to `iqueryrow`.\
        \ Type a word or phrase.\n\n It is possible to use `simplified regex` form\
        \ to type the query.\n\nUse `asterisk (*)` for any number of unspecified characters.\
        \ Use a `question mark (?)` for exactly one unspecified character. Use the\
        \ `pipe (|)` to include more than one word or phrase. Use `two hyphens (--)`\
        \ to search for a word that can be hyphenated, non-hyphenated or spelt as\
        \ two separate words."
    129_concordance_query_cql:
      in: query
      name: concordance_query[cql]
      schema:
        type: string
      description: Use this parameter only if `queryselector` is set to `cqlrow`.
        Type the [cql](https://www.sketchengine.eu/documentation/corpus-querying/)
        expression.
    130_concordance_query_lemma:
      in: query
      name: concordance_query[lemma]
      schema:
        type: string
      description: Use this parameter only if `queryselector` is set to `lemmarow`.
        Type the lemma or regex.
    131_concordance_query_char:
      in: query
      name: concordance_query[char]
      schema:
        type: string
      description: Use this parameter only if `queryselector` is set to `charrow`.
    132_concordance_query_word:
      in: query
      name: concordance_query[word]
      schema:
        type: string
      description: Use this parameter only if `queryselector` is set to `wordrow`.
        Type the word or regex.
    133_concordance_query_phrase:
      in: query
      name: concordance_query[phrase]
      schema:
        type: string
      description: Use this parameter only if `queryselector` is set to `phraserow`.
        Type the phrase or regex.
    134_errcorr_switch:
      in: query
      name: errcorr_switch
      schema:
        type: string
        enum:
        - corr
        - err
      description: Parameter to select which code should be highlighted. Corr means
        **correction** and err means **error**. Use this parameter when you want to
        work with corpus with avaible error annotations. Example of such a corpus
        can be `preloaded/enwiki_error_sample_sentences`.
    135_cup_err_code:
      in: query
      name: cup_err_code
      schema:
        type: string
        enum:
        - .*
        - lexicosemantic
        - punct
        - spelling
        - style
        - typographical
        - unclassified
      description: Parameter to select which error type to higlight. Use this parameter
        when you want to work with corpus with available error annotations. Example
        of such a corpus can be `preloaded/enwiki_error_sample_sentences`.
    136_cup_err:
      in: query
      name: cup_err
      schema:
        type: string
      description: Type a word you want to search. Context with specified word containing
        the error will be returned.
    137_cup_corr:
      in: query
      name: cup_corr
      schema:
        type: string
      description: Type a word you want to search. Context with specified word will
        be returned.
    138_hitlen:
      in: query
      name: hitlen
      schema:
        type: integer
        example: 1
    139_detail_left_ctx:
      in: query
      name: detail_left_ctx
      schema:
        type: integer
        example: 50
      description: Size of the extented left context of the concordance item.
    140_detail_right_ctx:
      in: query
      name: detail_right_ctx
      schema:
        type: integer
        example: 50
      description: Size of the extented right context of the concordance item.
  schemas:
    01_corp_info:
      type: object
      properties:
        wposlist:
          description: A list of WPOS (`Word Part Of Speech`). Presented as a pair
            of WPOS names and regular expression matching the WPOS tags.
          type: array
          items:
            type: array
            items:
              type: string
              example: '["adjective","J.*"]'
              description: At [tagsets](https://www.sketchengine.eu/tagsets/) you
                can find the meaning of used POS tags for 55 languages. Make sure
                you select the correct language.
        lposlist:
          description: A list of LPOS (`Lemma Part Of Speech`). Presented as a pair
            of LPOS names and LPOS tags. Used in Concordance forms.
          type: array
          items:
            type: array
            items:
              type: string
              example: '["adjective","-j"]'
              description: Other examples can be [ "adverb", "-a" ], [ "conjunction",
                "-c" ], [ "noun", "-n" ] etc. To see all pairs of LPOSLIST you execute
                the endpoint via the `Try it Out button`.
        wsposlist:
          description: Has the same format as LPOSLIST but WSPOSLIST is used in Word
            Sketch and Thesaurus forms.
          type: array
          items:
            type: array
            items:
              type: string
              example: '["adjective","-j"]'
              description: Same as in LPOSLIST. To see all pairs of WSPOSLIST you
                execute the endpoint via the `Try it Out button`.'
        attributes:
          description: A list of objects containing detailed information about attributes
            occuring in specified corpora.
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: lempos_lc
                description: Name of attribute. Lempos_lc = Lemma part of speech lowercase.
              id_range:
                type: integer
                example: 524493
                description: The number of attributes of the given name in the corpus.
                  Each is counted only once even if it appears in corpus many times.
              label:
                type: string
                example: lempos(lowercase)
                description: An extra description.
              dynamic:
                type: string
                example: utf8lowercase
                description: Represents the rule according which the attribute should
                  be derived from the original attribute. The attribute `lempos_lc`
                  is derived from `lempos` to save disk space etc. [Read more](https://www.sketchengine.eu/documentation/corpus-configuration-file-all-features/#Dynamicattributes).
              fromattr:
                type: string
                example: lempos
                description: A name of attribute this attribute is derived from. Empty
                  string if the attribute is not derived from any.
        structs:
          description: A list of structures in the corpus.
          type: array
          items:
            type: string
        name:
          type: string
          example: British National Corpus (BNC)
          description: The full name of the corpus.
        lang:
          type: string
          example: English
          description: The language of the corpus.
        infohref:
          type: string
          example: https://www.sketchengine.eu/british-national-corpus/
          description: An URL with more information about the corpus. Empty string
            if none.
        info:
          type: string
          example: "A balanced English corpus of samples of a written and spoken language\
            \ of British English from the later part of the 20th century (1969\u2013\
            1994). The spoken part is accompanied by audio recordings."
          description: More information about the corpus.
        encoding:
          type: string
          example: UTF-8
          description: The used character encoding in the corpus.
        tagsetdoc:
          type: string
          example: https://www.sketchengine.eu/english-treetagger-pipeline-2/
          description: An URL with more information about the POS tagger used in the
            corpus. Information like meanings of POS tags, comparition with other
            tagsets for specified language etc.
        defaultattr:
          type: string
          example: lc
          description: The default attribute for the corpus. Usually `word` or `lc`.
        starattr:
          type: string
        unicameral:
          type: boolean
          example: false
          description: A boolean value indicating if the corpus is unicameral (not
            distinguishing between upper and lower case).
        righttoleft:
          type: boolean
          example: false
          description: The order of writing in language of the used corpus.
        errsetdoc:
          type: string
        wsattr:
          type: string
          example: lempos_lc
          description: The attribute name for which word sketches are computed, e.g.
            `lempos`.
        wsdef:
          type: string
          example: /corpora/wsdef/english-penn_tt-3.1.wsdef.m4
          description: A path to the `used` word sketches grammar definition file.
        termdef:
          type: string
          example: /corpora/wsdef/english-penn_tt-terms-3.1.termdef.m4
          description: A path to the term grammar definition file used in the corpus.
        diachronic:
          description: A list of diachronic subcorporas. Diachronic corpus is corpus
            with timestamps to watch development of the language in time.
          type: array
          items:
            type: string
            example: bncdoc.year
        aligned:
          description: A list of aligned corpora names. `Example used here is from
            different corpus because BNC corpus is not parallel.`
          type: array
          items:
            type: array
            items:
              type: string
              example: a_czech
              description: Just the corpname of the aligned corpora. Parallel corpora
                support just two languages (corpora).
        aligned_details:
          description: Is shown only if the specified corpus is parallel. A list of
            dictionaries containing detailed information about each aligned subcorpus.
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: Example_1
                description: The name of the aligned corpus.
              language_name:
                type: string
                example: Czech
                description: The language of the aligned corpus.
              Wposlist:
                type: array
                items:
                  type: object
                  properties:
                    n:
                      type: string
                      example: noun
                      description: The name of the part of speech category
                    v:
                      type: string
                      example: k1.*
                      description: A regex matching the category
              Lposlist:
                type: array
                items:
                  type: object
                  properties:
                    n:
                      type: string
                      example: noun
                      description: Name of part of speech category
                    v:
                      type: string
                      example: -n
                      description: The shortcut for better representation of a speech
                        category.
              has_case:
                type: boolean
                description: Represent if the language of aligned corpus differentiates
                  between upper case and lower case.
              has_lemma:
                type: boolean
                description: Represent if the language of aligned corpus has lemma
                  of not.
              tagsetdoc:
                type: string
                example: https://www.sketchengine.eu/tagset-reference-for-czech
                description: URL with closer information.
        freqttattrs:
          description: A list of attributes (text types) that will be used for Frequency.
            Text types are metadata attached to the corpus structures. You can access
            it via Sketch Engine dashboard -> Corpus Info -> Text Type Analysis.
          type: array
          items:
            type: string
            example: '["bncdoc.alltyp", "bncdoc.alltim", "bncdoc.author", "bncdoc.wripp",
              "bncdoc.sporeg", "bncdoc.scgdom", "bncdoc.wridom", "bncdoc.spolog",
              "event.desc", "bncdoc.wrimed", "bncdoc.year", "bncdoc.genre"]'
        subcorpattrs:
          description: A list of subcorpus attributes for the corpus.
          type: array
          items:
            type: string
            example: '["bncdoc.alltyp", "bncdoc.alltim", "bncdoc.author", "bncdoc.wripp",
              "bncdoc.sporeg", "bncdoc.scgdom", "bncdoc.wridom", "bncdoc.spolog",
              "event.desc", "bncdoc.wrimed", "bncdoc.year", "bncdoc.genre"]'
        shortref:
          type: string
          example: =bncdoc.alltyp
          description: The attribute of a structure to display as a default reference
            in the left-hand column of a concordance. The syntax is like `=structure.attribute`,
            e.g. `=doc.id` for displaying only the value of `doc.id`.
        docstructure:
          type: string
          example: bncdoc
          description: A structures that is considered as individual documents. Usually
            `doc`.
        newversion:
          type: string
          example: ''
          description: Information about the new version of the corpus, if available.
            Empty string if not.
        structures:
          description: A list of structures appearing in corpus.
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: head
                description: The name of the structure.
              label:
                type: string
                description: Just some extra information. Empty string if none.
              attributes:
                description: More detailed information.
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: rend
                      description: Name of attribute.
                    label:
                      type: string
                      example: ''
                      description: An extra information about attribute. Empty string
                        if none.
                    dynamic:
                      type: string
                      description: Dynamic (derived) attribute. Empty string if none.
                        [Read more](https://www.sketchengine.eu/documentation/corpus-configuration-file-all-features/#Dynamicattributes)
                    fromattr:
                      type: string
                      description: A name of attribute this attribute is derived from.
                        Empty string if none.
                    size:
                      type: integer
                      example: 5
                      description: Number of occurences.
              size:
                type: integer
                example: 14868944
                description: Number of occurences of `head` structure in this case.
        is_error_corpus:
          type: boolean
          example: false
          description: A boolean value indicating if the corpus is an error corpus
            (not compiled etc.).
        structctx:
          type: string
          example: ''
          description: The structural context for the corpus. Empty string if none.
        deffilerlink:
          type: boolean
          example: false
          description: A boolean value indicating if the default filter link is enabled.
        defaultstructs:
          description: A list of default structures for the corpus.
          type: array
          items:
            type: string
        wsttattrs:
          type: string
          description: The text types for which the word highlights [Read more](https://www.sketchengine.eu/find-x-word-highlights/)
            are computed.
        terms_compiled:
          type: boolean
          example: true
          description: A boolean value indicating if the terms file is compiled.
        compiled:
          type: string
          example: 06/30/2017 07:34:25
          description: A date of compilation in format `mm/dd/yyyy hh:mm:ss`.
        gramrels:
          type: array
          items:
            type: string
        sizes:
          type: object
          properties:
            tokencount:
              type: string
              example: '112345722'
            wordcount:
              type: string
              example: '96134547'
            doccount:
              type: string
              example: '4054'
              description: Document counter.
            parcount:
              type: string
              example: '1514906'
              description: Paragraph counter.
            sentcount:
              type: string
              example: '6052190'
              description: Sentences counter.
            normsum:
              type: string
              example: '96134547'
              description: Wordcount after normalization.
        alsizes:
          description: A list of tuples containing sizes of aligned corpora.
          type: array
          items:
            type: string
        registry_dump:
          type: string
          description: The registry dump for the corpus (detailed information about
            corpus setting), if the registry parameter is set.
        registry_text:
          type: string
          description: The registry text for the corpus (detailed information about
            corpus setting), if the registry parameter is set.
        subcorpora:
          type: array
          items:
            type: object
            properties:
              n:
                type: string
                example: Test
                description: A name of subcorpus.
              name:
                type: string
                example: Test
                description: A name of subcorpus.
              user:
                type: integer
                example: 1
                description: Represent if subcorpora is created by user or not.
              tokens:
                type: integer
                example: 271454
                description: Number of tokens in subcorpus.
              relsize:
                type: number
                example: 0.24162379765559744
                description: The percentage of subcorpus size from total corpus size.
              words:
                type: integer
                example: 232283
                description: Number of words in subcorpus.
              struct:
                type: string
                example: s
              query:
                type: string
                example: Q:q[lc="dog" | lemma_lc="dog"]
        api_version:
          type: string
          example: 5.62.3
          description: Current API version.
        manatee_version:
          type: string
          example: 2.36.7-SkE-2.219.2
          description: Current version of Manatee.
        request:
          description: Just summary section of parsed query parameters used in this
            endpoint call. These parameters are all documented in the beggining of
            every endpoint box (after you unwrap the endpoint).
          type: object
          properties:
            subcorpora:
              type: string
              example: '1'
            struct_attr_stats:
              type: string
              example: '1'
            corpname:
              type: string
              example: preloaded/bnc2_tt21
    02_wordlist:
      type: object
      properties:
        new_maxitems:
          type: integer
          example: 20000
        wllimit:
          type: integer
          example: 1000
          description: Word list limit, amount of words to be display.
        lastpage:
          type: integer
          example: 0
        note:
          type: string
          example: You are allowed to see only 1000 items.
          description: An additional note to displayed results.
        total:
          type: integer
          example: 165953
          description: Number if displayed items (word - frequency).
        totalfrq:
          type: integer
          example: 111680004
          description: Sum of all frequencies.
        items:
          description: A result list.
          type: array
          items:
            type: object
            properties:
              str:
                type: string
                example: the
                description: The word to which the frequency has been calculated.
              frq:
                type: integer
                example: 6054939
                description: The word frequency.
              relfreq:
                type: number
                example: 53895.59026
                description: The relative word frequency. Relative frequency is a
                  way of expressing how often something happens compared to other
                  events or items in a given group.
        wlattr_label:
          type: string
          example: word(lowercase)
        frtp:
          type: string
          example: frequency
          description: Frequency type. Other possible values can be `average reduced
            frequency`, `document frequency`, `score`.
        api_version:
          type: string
          example: 5.62.3
        manatee_version:
          type: string
          example: 2.36.7-SkE-2.219.2
        request:
          description: Just summary section of parsed query parameters used in this
            endpoint call. These parameters are all documented in the beggining of
            every endpoint box.
          type: object
          properties:
            wlminfreq:
              type: string
              example: '5'
            random:
              type: string
              example: '0'
            include_nonwords:
              type: string
              example: '1'
            wltype:
              type: string
              example: simple
            wlmaxitems:
              type: string
              example: '20000'
            wlsort:
              type: string
              example: frq
            wlicase:
              type: string
              example: '1'
            wlpage:
              type: string
              example: '1'
            reldocf:
              type: string
              example: '1'
            wlpat:
              type: string
              example: .*
            relfreq:
              type: string
              example: '1'
            wlattr:
              type: string
              example: lc
            wlmaxfreq:
              type: string
              example: '0'
            corpname:
              type: string
              example: preloaded/bnc2_tt21
    06_concordance:
      type: object
      properties:
        Lines:
          type: array
          items:
            type: object
            properties:
              toknum:
                type: integer
                example: 10336
              hitlen:
                type: integer
                example: 1
              Refs:
                type: array
                items:
                  type: string
                  example: Written books and periodicals
              Tbl_refs:
                type: array
                items:
                  type: string
                  example: Written books and periodicals
              Left:
                type: array
                items:
                  type: object
                  properties:
                    strc:
                      type: string
                      example: <s>
              Kwic:
                type: array
                items:
                  type: object
                  properties:
                    str:
                      type: string
                      example: dogs
                    coll:
                      type: integer
                      example: 1
              Right:
                type: array
                items:
                  type: object
                  properties:
                    str:
                      type: string
                      example: </s>
              Links:
                type: array
                items:
                  type: string
              linegroup:
                type: string
                example: _
              linegroup_id:
                type: integer
                example: 0
        fromp:
          type: integer
          example: 1
        concsize:
          type: integer
          example: 12087
        concordance_size_limit:
          type: integer
          example: 10000
        Sort_idx:
          type: array
          items:
            type: string
        righttoleft:
          type: boolean
          example: false
        Aligned_rtl:
          type: array
          items:
            type: string
        numofcolls:
          type: integer
          example: 0
        finished:
          type: integer
          example: 1
        fullsize:
          type: integer
          example: 12087
        relsize:
          type: number
          example: 107.59
        q:
          type: array
          items:
            type: string
            example: q[lc=\"dog\" | lemma_lc=\"dog\"]
        Desc:
          type: object
          properties:
            op:
              type: string
              example: Query
            arg:
              type: string
              example: '[lc=\"dog\" | lemma_lc=\"dog\"]'
            nicearg:
              type: string
              example: dog
            rel:
              type: number
              example: 107.59
            size:
              type: integer
              example: 12087
            tourl:
              type: string
              example: q=q%5Blc%3D%22dog%22+%7C+lemma_lc%3D%22dog%22%5D
        port:
          type: integer
          example: 0
        gdex_scores:
          type: array
          items:
            type: string
        sc_strcts:
          type: array
          items:
            type: array
            items:
              type: string
              example: bncdoc
        api_version:
          type: string
          example: 5.63.1
        manatee_version:
          type: string
          example: 2.36.7-SkE-2.221
        request:
          type: object
          properties:
            concordance_query:
              type: array
              items:
                type: object
                properties:
                  queryselector:
                    type: string
                    example: iqueryrow
                  iquery:
                    type: string
                    example: dog
            corpname:
              type: string
              example: preloaded/bnc2_tt21
            kwicleftctx:
              type: string
              example: 100#
            structs:
              type: string
              example: s,g
            viewmode:
              type: string
              example: sen
            attr_allpos:
              type: string
              example: all
            fromp:
              type: string
              example: '1'
            json:
              type: string
              example: '{\"concordance_query\":[{\"queryselector\":\"iqueryrow\",\"iquery\":\"dog\"}]}'
            kwicrightctx:
              type: string
              example: 100#
            refs:
              type: string
              example: =bncdoc.alltyp
            cup_hl:
              type: string
              example: q
            attrs:
              type: string
              example: word
            pagesize:
              type: string
              example: '20'
    07_subcorp:
      type: object
      properties:
        subcname:
          type: string
          example: Australian domain .au
        SubcorpList:
          type: array
          items:
            type: object
            properties:
              n:
                type: string
                example: Australian domain .au
              name:
                type: string
                example: Australian domain .au
              user:
                type: integer
                example: 0
        api_version:
          type: string
          example: 5.63.1
        manatee_version:
          type: string
          example: 2.36.7-SkE-2.221
        request:
          type: object
          properties:
            corpname:
              type: string
              example: preloaded/ententen13_tt2_1
    08_extract_keywords:
      type: object
      properties:
        keywords:
          type: array
          items:
            type: object
            properties:
              item:
                type: string
                example: "galsk\xFD"
              score:
                type: number
                example: 2411.16
              frq1:
                type: integer
                example: 2
              frq2:
                type: integer
                example: 512
              rel_frq1:
                type: number
                example: 4291.8457
              rel_frq2:
                type: number
                example: 0.78041
              query:
                type: string
                example: "[lemma=\\\"galsk\xFD\\\"]"
        referece_corpus_name:
          type: string
          example: Slovak Web 2011 (skTenTen11)
        reference_corpus_size:
          type: integer
          example: 656067998
        reference_subcorpus_size:
          type: integer
          example: 656067998
        subcorpus_size:
          type: integer
          example: 466
        corpus_size:
          type: integer
          example: 466
        total:
          type: integer
          example: 175
        totalfrq1:
          type: integer
          example: 466
        totalfrq2:
          type: integer
          example: 250525622
        wllimit:
          type: integer
          example: 1000
        note:
          type: string
          example: ''
        api_version:
          type: string
          example: 5.63.1
        manatee_version:
          type: string
          example: 2.36.7-SkE-2.221
        request:
          type: object
          properties:
            alnum:
              type: string
              example: '1'
            maxfreq:
              type: string
              example: '0'
            minfreq:
              type: string
              example: '1'
            wlpat:
              type: string
              example: .*
            attr:
              type: string
              example: lemma
            keywords:
              type: string
              example: '1'
            ref_corpname:
              type: string
              example: preloaded/sktenten11_rft1
            simple_n:
              type: string
              example: '1'
            k_attr:
              type: string
              example: lemma
            include_nonwords:
              type: string
              example: '0'
            reldocf:
              type: string
              example: :"0"
            icase:
              type: string
              example: '1'
            onealpha:
              type: string
              example: '1'
            max_keywords:
              type: string
              example: '1000'
            corpname:
              type: string
              example: user/matuskostka1/aaaaa_slovak
    09_attr_vals:
      type: object
      properties:
        query:
          type: string
          example: .*
          description: The regular expression from query parameter `avpat`.
        suggestions:
          type: array
          items:
            type: string
            example: "[ \"Cookson, Neil Andrew\", \u2026 ]"
          description: Suggestions for avattr `bncdoc.author`.
        no_more_values:
          type: boolean
          example: false
          description: Represent if the `suggestion` list is complete.
        api_version:
          type: string
          example: 5.63.1
        manatee_version:
          type: string
          example: 2.36.7-SkE-2.221
        request:
          type: object
          properties:
            avpat:
              type: string
              example: .*
            avmaxitems:
              type: string
              example: '15'
            ajax:
              type: string
              example: '1'
            corpname:
              type: string
              example: preloaded/bnc2_tt21
            avfrom:
              type: string
              example: '0'
            icase:
              type: string
              example: '1'
            avattr:
              type: string
              example: bncdoc.author
    11_freqml:
      type: object
      properties:
        fcrit:
          type: string
          example: fcrit=word%2Fe+-1%3C0+lemma%2Fe+-1%3C0
        FCrit:
          type: array
          items:
            type: object
            properties:
              fcrit:
                type: string
                example: word/e -1<0 lemma/e -1<0
        Blocks:
          type: array
          items:
            type: object
            properties:
              Head:
                type: array
                items:
                  type: object
                  properties:
                    n:
                      type: string
                      example: word
                    s:
                      type: integer
                      example: 0
                    id:
                      type: string
                      example: word/e
              total:
                type: integer
                example: 1700
              totalfrq:
                type: integer
                example: 12087
              Items:
                type: array
                items:
                  type: object
                  properties:
                    Word:
                      type: array
                      items:
                        type: object
                        properties:
                          n:
                            type: string
                            example: the
                    frq:
                      type: integer
                      example: 2621
                    rel:
                      type: integer
                      example: 0
                    reltt:
                      type: integer
                      example: 0
                    norm:
                      type: integer
                      example: 0
                    fbar:
                      type: integer
                      example: 301
                    relbar:
                      type: integer
                      example: 0
                    freqbar:
                      type: integer
                      example: 0
                    pfilter:
                      type: string
                      example: ;q=p-1%3C0+-1%3C0+0+%5Bword%3D%22the%22%5D;q=p-1%3C0+-1%3C0+0+%5Blemma%3D%22the%22%5D
                    nfilter:
                      type: string
                    pfilter_list:
                      type: array
                      items:
                        type: array
                        items:
                          type: string
                          example: p-1<0 -1<0 0 [word="the"]
                    poc:
                      type: number
                      example: 21.684454372466284
                    fpm:
                      type: number
                      example: 23.329771292938062
        paging:
          type: integer
          example: 1
        concsize:
          type: integer
          example: 12087
        fullsize:
          type: integer
          example: 14297
        Desc:
          type: array
          items:
            type: object
            properties:
              op:
                type: string
                example: Query
              arg:
                type: string
                example: '[lc="dog" | lemma_lc="dog"]'
              nicearg:
                type: string
                example: dog
              rel:
                type: number
                example: 107.59
              size:
                type: integer
                example: 12087
              tourl:
                type: string
                example: q=q%5Blc%3D%22dog%22+%7C+lemma_lc%3D%22dog%22%5D
        numofcolls:
          type: integer
          example: 0
        hitlen:
          type: integer
          example: 1
        wllimit:
          type: integer
          example: 1000
        lastpage:
          type: integer
          example: 0
        ml:
          type: boolean
          example: true
        api_version:
          type: string
          example: 5.63.12
        manatee_version:
          type: string
          example: 2.36.7-SkE-2.223.6
        request:
          description: Just summary section of parsed query parameters used in this
            endpoint call. These parameters are all documented in the beggining of
            every endpoint box.
          type: object
          properties:
            concordance_query:
              type: array
              items:
                type: object
                properties:
                  queryselector:
                    type: string
                    example: iqueryrow
                  iquery:
                    type: string
                    example: dog
            format:
              type: string
              example: json
            fpage:
              type: string
              example: '1'
            showpoc:
              type: string
              example: '1'
            freqlevel:
              type: string
              example: '2'
            group:
              type: string
              example: '1'
            freq_sort:
              type: string
              example: freq
            ml1ctx:
              type: string
              example: -1<0
            showreltt:
              type: string
              example: '1'
            ml2attr:
              type: string
              example: lemma
            ml1attr:
              type: string
              example: word
            ml2ctx:
              type: string
              example: -1<0
            fmaxitems:
              type: string
              example: '5000'
            corpname:
              type: string
              example: preloaded/bnc2_tt21
            showrel:
              type: string
              example: '1'
    12_struct_wordlist:
      type: object
      properties:
        fcrit:
          type: string
          example: fcrit=lemma%2Fe+0+word%2Fe+0+lempos%2Fe+0
        FCrit:
          type: array
          items:
            type: object
            properties:
              fcrit:
                type: string
                example: lemma/e 0 word/e 0 lempos/e 0
        Blocks:
          type: array
          items:
            type: object
            properties:
              Head:
                type: array
                items:
                  type: object
                  properties:
                    n:
                      type: string
                      example: lemma
                    s:
                      type: integer
                      example: 0
                    id:
                      type: string
                      example: lemma/e
              total:
                type: integer
                example: 77
              totalfrq:
                type: integer
                example: 13931
              Items:
                type: array
                items:
                  type: object
                  properties:
                    Word:
                      type: array
                      items:
                        type: object
                        properties:
                          n:
                            type: string
                            example: dog
                    frq:
                      type: integer
                      example: 6829
                    rel:
                      type: integer
                      example: 0
                    reltt:
                      type: integer
                      example: 0
                    norm:
                      type: integer
                      example: 0
                    fbar:
                      type: integer
                      example: 301
                    relbar:
                      type: integer
                      example: 0
                    freqbar:
                      type: integer
                      example: 0
                    pfilter:
                      type: string
                      example: ;q=p0+0+0+%5Blemma%3D%22dog%22%5D;q=p0+0+0+%5Bword%3D%22dog%22%5D;q=p0+0+0+%5Blempos%3D%22dog-n%22%5D
                    nfilter:
                      type: string
                    pfilter_list:
                      type: array
                      items:
                        type: array
                        items:
                          type: string
                          example: p0 0 0 [lemma="dog"]
                    poc:
                      type: number
                      example: 47.765265440302166
                    fpm:
                      type: number
                      example: 60.78558113676994
        paging:
          type: integer
          example: 1
        concsize:
          type: integer
          example: 14297
        fullsize:
          type: integer
          example: 14297
        Desc:
          type: array
          items:
            type: object
            properties:
              op:
                type: string
                example: Query
              arg:
                type: string
                example: '[lemma_lc="(dog.*)"]'
              nicearg:
                type: string
                example: (dog.*)
              rel:
                type: number
                example: 127.26
              size:
                type: integer
                example: 14297
              tourl:
                type: string
                example: q=q%5Blemma_lc%3D%22%28dog.%2A%29%22%5D
        numofcolls:
          type: integer
          example: 0
        hitlen:
          type: integer
          example: 1
        wllimit:
          type: integer
          example: 1000
        lastpage:
          type: integer
          example: 1
        ml:
          type: boolean
          example: true
        api_version:
          type: string
          example: 5.63.12
        manatee_version:
          type: string
          example: 2.36.7-SkE-2.223.6
        request:
          description: Just summary section of parsed query parameters used in this
            endpoint call. These parameters are all documented in the beggining of
            every endpoint box.
          type: object
          properties:
            wlmaxfreq:
              type: string
              example: '0'
            wlpage:
              type: string
              example: '1'
            random:
              type: string
              example: '0'
            wlstruct_attr1:
              type: string
              example: lemma
            wltype:
              type: string
              example: struct_wordlist
            fmaxitems:
              type: string
              example: '20000'
            wlpat:
              type: string
              example: (dog.*)
            wlnums:
              type: string
              example: frq
            wlattr:
              type: string
              example: lemma_lc
            wlicase:
              type: string
              example: '1'
            wlmaxitems:
              type: string
              example: '20000'
            wlstruct_attr3:
              type: string
              example: lempos
            relfreq:
              type: string
              example: '1'
            include_nonwords:
              type: string
              example: '1'
            wlsort:
              type: string
              example: frq
            wlstruct_attr2:
              type: string
              example: word
            corpname:
              type: string
              example: preloaded/bnc2_tt21
            reldocf:
              type: string
              example: '1'
            wlminfreq:
              type: string
              example: '5'
    13_freq_distrib:
      type: object
      properties:
        dots:
          type: array
          items:
            type: object
            properties:
              frq:
                type: integer
                example: 64
                description: ''
              pos:
                type: integer
                example: 0
                description: ''
              beg:
                type: integer
                example: 72053
                description: ''
              end:
                type: integer
                example: 2475660
                description: ''
        granularity:
          type: integer
          example: 50
          description: ''
        api_version:
          type: string
          example: 5.63.12
        manatee_version:
          type: string
          example: 2.36-7-SkE-2.223.6
        request:
          type: object
          properties:
            concordance_query:
              type: array
              items:
                type: object
                properties:
                  queryselector:
                    type: string
                    example: lemmarow
                  lemma:
                    type: string
                    example: cat
                  lpos:
                    type: string
                    example: -n
                  qmcase:
                    type: integer
                    example: 0
            structs:
              type: string
              example: s,g
            fc_lemword_type:
              type: string
              example: all
            attrs:
              type: string
              example: word
            json:
              type: string
              example: '{"concordance_query":[{"queryselector":"lemmarow","lemma":"cat","lpos":"-n","qmcase":false}]}'
            res:
              type: string
              example: '50'
            fc_lemword_window_type:
              type: string
              example: both
            normalize:
              type: string
              example: '0'
            format:
              type: string
              example: json
            attr_allpos:
              type: string
              example: all
            fc_pos_type:
              type: string
              example: all
            fc_pos_wsize:
              type: string
              example: '5'
            refs:
              type: string
              example: =bncdoc.alltyp
            viewmode:
              type: string
              example: sen
            lpos:
              type: string
              example: -n
            corpname:
              type: string
              example: preloaded/bnc2_tt21
            default_attr:
              type: string
              example: lemma
            fc_lemword_wsize:
              type: string
              example: '5'
            fc_pos_window_type:
              type: string
              example: both
    14_fullref:
      type: object
      properties:
        Refs:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: Token number
              id:
                type: string
                example: '#'
              val:
                type: string
                example: '6270887'
        bncdoc_id:
          type: string
          example: J1C
        bncdoc_author:
          type: string
          example: ===NONE===
        bncdoc_year:
          type: string
          example: ===NONE===
        bncdoc_title:
          type: string
          example: '[Leeds United e-mail list]'
        bncdoc_info:
          type: string
          example: '[Leeds United e-mail list]. Sample containing about 41810 words
            of unpublished miscellanea (domain: leisure)'
        bncdoc_allava:
          type: string
          example: Ownership has not been claimed
        bncdoc_alltim:
          type: string
          example: 1985-1993
        bncdoc_alltyp:
          type: string
          example: Written miscellaneous
        bncdoc_genre:
          type: string
          example: W_email
        u_who:
          type: string
          example: ''
        s_audio:
          type: string
          example: ===NONE===
        api_version:
          type: string
          example: 5.63.12
        manatee_version:
          type: string
          example: 2.36.7-SkE-2.223.6
        request:
          type: object
          properties:
            corpname:
              type: string
              example: preloaded/bnc2_tt21
            pos:
              type: string
              example: '6270887'
    15_textypes_with_norms:
      type: object
      properties:
        Blocks:
          type: array
          items:
            type: object
            properties:
              Line:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: bncdoc.alltyp
                    label:
                      type: string
                      example: Text type
                    attr_doc:
                      type: string
                      example: ''
                    attr_doc_label:
                      type: string
                      example: ''
                    Values:
                      type: array
                      items:
                        type: object
                        properties:
                          v:
                            type: string
                            example: Spoken context-governed
                          xcnt:
                            type: integer
                            example: 757
        Normlist:
          type: array
          items:
            type: object
            properties:
              n:
                type: string
                example: freq
              label:
                type: string
                example: Document counts
        api_version:
          type: string
          example: 5.63.12
        manatee_version:
          type: string
          example: 2.36.7-SkE-2.223.6
        request:
          type: object
          properties:
            corpname:
              type: string
              example: preloaded/bnc2_tt21
    16_widectx:
      type: object
      properties:
        wrapdetail:
          type: string
          example: <p>
        deletewrap:
          type: boolean
          example: true
        content:
          type: array
          items:
            type: object
            properties:
              str:
                type: string
                example: ', in Hungarian also means "majority of", "its belongings",
                  "its goods", "its best portion", a type of pork, and may also be
                  incorrectly identified as an agglutination of a frequent abbreviation
                  in mailing lists.'
              class:
                type: string
                example: ''
        leftlink:
          type: string
          example: pos=831745;detail_left_ctx=110;detail_right_ctx=50
        rightlink:
          type: string
          example: pos=831745;detail_left_ctx=50;detail_right_ctx=110
        pos:
          type: integer
          example: 831745
        maxcontent:
          type: integer
          example: 200
        api_version:
          type: string
          example: 5.63.12
        manatee_version:
          type: string
          example: 2.36.7-SkE-2.223.6
        request:
          type: object
          properties:
            detail_left_ctx:
              type: string
              example: '50'
            corpname:
              type: string
              example: preloaded/ententen21_tt31
            hitlen:
              type: string
              example: '1'
            pos:
              type: string
              example: '831745'
            detail_right_ctx:
              type: string
              example: '50'
            structs:
              type: string
              example: s,g
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
security:
- basicAuth: []